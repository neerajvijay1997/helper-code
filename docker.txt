install docker
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04
Install docker using apt repository (docker desktop is not required)
https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
To execute docker command without sudo
https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user

ENTER DOCKER CONTAINER
docker exec -it <container_name> bash


PRINT DOCKER LOGS
docker logs -f <container_name>


docker ps
docker ps -a


run the docker container from image
docker run hello-world
-it (Starts an interactive session with the container)



CLEAN UP

STOP ALL CONTAINER
docker stop $(docker ps -q)

REMOVE ALL CONTAINER
docker rm $(docker ps -aq)


docker system prune 
docker image prune
docker volume prune

REMOVE ALL DOCKER VOLUME
docker volume rm $(docker volume ls -q)

REMOVE DOCKER IMAGES
docker rmi -f7 <imageid1>  <imageid2> 

HOW TO SET BUILD CONTEXT WHEN CREATING IMAGE?

docker build -t cerc/secured-finance-watcher-ts:local -f ~/Dockerfile ~/secured-finance-watcher-ts

-t flag > (name:tag format) (here local is tag)
-f flag > location of Dockerfile for building image

~/secured-finance-watcher-ts (imp positional argument) > BUILD CONTEXT > directory from which the Docker daemon will read the files to use during the image build process


HOW TO USE BUILD CONTEXT

Why this?
docker build -t cerc/secured-finance-watcher-ts:local -f ${SCRIPT_DIR}/Dockerfile ${build_command_args} ${CERC_REPO_BASE_DIR}/secured-finance-watcher-ts

WORKDIR /app  (Similar to cd, all subsequent command executed form /app)
COPY . .   (copy items from ${CERC_REPO_BASE_DIR}/secured-finance-watcher-ts build context to /app directory)




docker network
https://docs.docker.com/network/





To run the Docker container and then enter it to execute the pwd command
docker run -it cerc/nitro-contracts:local /bin/bash
Inside the container, run the command: pwd
or 
docker run -it cerc/nitro-contracts:local /bin/bash -c "pwd"



DOCKER NETWORK DEFAULT
containers that are started simultaneously in a Docker Compose file share the same Docker network by default. Docker Compose automatically creates a default network for the services defined in the Compose file, allowing them to communicate with each other using their service names as hostnames
```
version: '3'
services:
  web:
    image: nginx
    ports:
      - "8080:80"
  db:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: example
```
When you run docker-compose up, Docker Compose creates a network for your services. By default, this network is named based on the directory where the Compose file is located, with the suffix _default. All services in the Docker Compose file can communicate with each other over this network. You can reference other containers using their service names defined in the docker-compose.yml file. In this example, the web service can communicate with the db service using the hostname db.



Bind Mounts vs. Docker Volumes
Bind mounts >> directly mount a host directory into your container.
https://spacelift.io/blog/docker-volumes



services in same docker compose file can share volume
services defined in the same Docker Compose file can share volumes. This is useful for sharing data between containers. You can define a volume in the volumes section of your Docker Compose file and then reference it in multiple services
```
version: '3.9'

services:
  service1:
    image: my-service1-image
    volumes:
      - shared-data:/app/data

  service2:
    image: my-service2-image
    volumes:
      - shared-data:/app/data

volumes:
  shared-data:
```
In this example:
Both service1 and service2 use the shared-data volume, which is mounted at /app/data inside both containers.
Any changes made by service1 to the files in /app/data will be accessible to service2, and vice versa.



services in different Docker Compose files can share a volume, but there are a few additional steps involved
To share a volume between services in different Compose files, you need to:
Create the shared volume outside of the Compose files: This ensures that the volume is accessible to both Compose projects.
Reference the external volume in each Compose file: Use the external option under volumes to tell Docker Compose that the volume is managed outside of the current Compose file.

```
Create the Shared Volume
docker volume create shared-data

docker compose 1
version: '3.9'

services:
  service1:
    image: my-service1-image
    volumes:
      - shared-data:/app/data

volumes:
  shared-data:
    external: true

docker compose 2
version: '3.9'

services:
  service2:
    image: my-service2-image
    volumes:
      - shared-data:/app/data

volumes:
  shared-data:
    external: true
```
docker-compose-service1.yml and docker-compose-service2.yml: Each Compose file references the same shared-data volume, but the volume is marked as external. This tells Docker Compose not to create the volume but to use the existing one.
Volume Creation: The volume shared-data is created once using docker volume create shared-data and can now be used by both services.





once compose file create service in one netwrok 
the other compose file create service in other network
how will both service communicate?

To enable communication between services defined in separate Docker Compose files that are on different networks, you need to connect the services to a common network. Hereâ€™s how you can do it:
Create a Common Network: Create a Docker network that both services can share. This network should be defined outside of the Docker Compose files.
```
docker network create shared-network
```
Connect Services to the Common Network: Modify each Docker Compose file to connect the services to the shared-network. You can do this by adding the external network to each Compose file.
```
docker compose 1
version: '3'
services:
  service-a:
    image: my-service-a
    networks:
      - custom-network-a
      - shared-network

networks:
  custom-network-a:
    driver: bridge
  shared-network:
    external: true
```
```
docker compose 2
version: '3'
services:
  service-b:
    image: my-service-b
    networks:
      - custom-network-b
      - shared-network

networks:
  custom-network-b:
    driver: bridge
  shared-network:
    external: true
```
Communicate Between Services: Services can now communicate using their service names on the shared-network. For example, service-a can reach service-b via the DNS name service-b on the shared-network.




how to get data from exited container???
Run same container using same docker image and same docker volume


